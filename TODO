Projects:
	☐ Semantic analysis @started(19-03-05 18:58)
		✔ Generate Simple antlr @started(19-03-04 17) @done(19-03-13 21) @lasted(1w2d3h46m41s)
		☐ Generate AST nodes and Type nodes for at most 1 day @started(19-03-16 14)
	☐ IR generate
	☐ ASM Code
	☐ code optimize
TODO|FIXME|FIX|BUG|UGLY|HACK|NOTE|IDEA|REVIEW|DEBUG|OPTIMIZE

Parser: 
	✔ change antlr extension to use @started(19-03-05 18) @done(19-03-05 18) @lasted(54m24s)

ASTNode: @today 
    ✔ Node       @done(03-16 14)
        ✔ AST (programNode) @done(03-16 17)
        ✔ Decl(define) @done(03-16 16)
            ✔ Func  @done(03-16 17)
            ✔ Class @done(03-16 17)
            ✔ Var   @done(03-16 17)
            ✘ VarList  @cancelled(03-16 17)
        ✔ Stmt @done(03-17 15)
            ✔ Block @done(03-17 15)
            ✔ Expr  @done(03-17 15)
            ✔ If (cond) @done(03-17 15)
            ✔ While @done(03-17 15)
            ✔ For 	@done(03-17 15)
            ✔ Continue @done(03-17 15)
            ✔ Break @done(03-17 15)
            ✔ Return @done(03-17 15)
            ✘ Blank @cancelled(03-17 15)
            ✘ VarDecl @cancelled(03-17 15)
        ✔ Expr @done(03-17 15)
            ✔ FuncCall @done(03-17 16) class method ?? done with 
            ✔ unary @done(03-17 16)
                ✔ suffix @done(03-17 16)
                ✔ prefix @done(03-17 16)
            ✔ lhs 	@done(03-20 21)
                ✔ memberaccess 	@done(03-17 21)
                ✔ array index(aref, subscript) 	@done(03-17 21)
            ✔ binary or and @done(03-17 16)
            ✔ new 		@done(03-17 16)
            ✔ identifier? var-decl-node @done(03-17 21)
            ✔ assign @done(03-17 17)
            ✔ this 	@done(03-17 16)
            ✔ const(literal) @done(03-17 16)
                ✔ int 	@done(03-17 16)
                ✔ string @done(03-17 16)
                ✔ bool 	@done(03-17 16)
            ✔ null 	@done(03-17 16)
        ✔ typeNode @done(03-20 18)
		✔ compare my g4 with fanzhou @high @started(03-20 18) @done(03-21 14) @lasted(20h14m37s)
			typeOrVoid -> typeFuncName
			parameterDeclarationList -> paramDeclarationList
			memberDeclaration -> classBody
			typeType -> type
			nonArrayTypeType -> typeName
			conditionStatement
			loopStatement
			jumpStatement





	☐ check ASTBuilder out @today @started(19-03-18 21:27)


TypeResolve:

	✔ type 	@done(03-17 22)
		✔ array @done(03-17 22)
		✔ func, class @done(03-17 22)
		✔ int, bool, string @done(03-17 22)
		✔ null void @done(03-17 22)

	✔ Scope init @done(03-16 16)

    ☐ entity
        ☐  what is diff between type and entity

    ☐ remain may be used for asm in Scope
        static private final String KEY_PREFIX = "$"
        static private final String VAR_PREFIX = "$VAR$"
        static private final String CLASS_PREFIX = "$CLASS$"
        static private final String FUNC_PREFIX = "$FUNC$"
        static public final String ARRAY_CLASS_NAME = "__array"
        static public final String STRING_CLASS_NAME = "__string"
        static public final String THIS_PARA_NAME = "__this_para"
	
		configuration for reg size

type from Book: @critical @high @today 
    ☐ change arrayList into LinkedHashSet or not? @started(19-03-16 17:30)
	☐ add Location type
	

✔ G4 file outline with ASTBuilder: @done(03-21 16)
	✔ compilationUnit @done(03-21 08)
		✔ translationUnit* EOF @done(03-21 08)
	✔ translationUnit @done(03-21 08)
		✔ variableDeclaration @done(03-21 08)
			✔ type variableDeclaratorList '' @done(03-21 09)
				✔ variableDeclarator (',' variableDeclarator)* @done(03-21 09)
					✔ Identifier ('=' expression)? @done(03-21 09)
		✘ type @cancelled(03-21 09)
			✔ type '[' ']'	# arrayType @done(03-21 09)
			✔ typeName		# nonarrayType @done(03-21 09)
				✔ Int Bool String Identifier		✔ functionDeclaration @done(03-21 10)
		✔ typeFuncName? Identifier '(' paramDeclarationList? ')' block @done(03-21 10)
			✔ typeFuncName type void @done(03-21 10)
			✔ paramDeclaration (',' paramDeclaration)* @done(03-21 10)
				✔ type Identifier @done(03-21 10)
		✔ classDeclaration @done(03-21 08)
			✔ Class Identifier '{' classBody* '}' @done(03-21 11)
				✔ functionDeclaration variableDeclaration @done(03-21 11)
	✔ statement @done(03-21 11)
		✔ block @done(03-21 11)
			✔ '{' blockBody* '}'									# blockStmt @done(03-21 11)
				✔ statement variableDeclaration @done(03-21 11)
		✔ expression ''									# exprStmt @done(03-21 11)
		✔ If '(' expression ')' statement (Else statement)?	# condStmt @done(03-21 11)
		✔ While '(' expression ')' statement				# whileStmt @done(03-21 11)
		✔ For + statement @done(03-21 12)
			✔ forDeclaration (type variableDeclaratorList) ';' expression? ';' expression?    #forCondInit @done(03-21 12)
			✔ expression? ';' expression? ';' expression?       #forCondNon @done(03-21 12)
		✔ Continue ''				# continueStmt @done(03-21 12)
		✔ Break ''					# breakStmt @done(03-21 12)
		✔ Return expression? ''	# returnStmt @done(03-21 12)
		✔ ''						# blankStmt @done(03-21 12)
	✔ expression @started(03-21 12) @done(03-21 16) @lasted(4h14m55s)
		// NOTE: position of primary expression
		✔ primaryExpression							# primaryExpr @done(03-21 12)
			✔ Identifier			# identifierExpr @done(03-21 12)
			✔ This					# thisExpr @done(03-21 12)
			✔ literal				# constExpr @done(03-21 12)
			✔ IntLiteral StringLiteral Null (True | False) @done(03-21 12)
			✔ '(' expression ')'	# subExpr  @done(03-21 14) () operator
		✔ expression op = ('++' | '--')				# suffixExpr @done(03-21 16)
		✔ expression '.' Identifier					# memberExpr // under lhs @done(03-21 14)
		✔ arr = expression '[' index = expression ']'	# arefExpr // under lhs @done(03-21 14)
		✔ expression '(' paramList? ')'				# funcallExpr @done(03-21 14)
			✔ expression (',' expression)* @done(03-21 14)
		✔ prefix unary @done(03-21 16)
			<assoc = right> op = ('++' | '--') expression	# prefixExpr
			<assoc = right> op = ('+' | '-') expression	# prefixExpr
			<assoc = right> op = ('!' | '~') expression	# prefixExpr
		✔ <assoc = right> New creator					# newExpr @done(03-21 14)
			✔ typeName ('[' expression ']')+ ('[' ']')+ ('[' expression ']')+	# errorCreator @done(03-21 14)
			✔ typeName ('[' expression ']')+ ('[' ']')*	# arrayCreator @done(03-21 16)
			✔ typeName ('(' ')')?						# nonArrayCreator @done(03-21 14)
		// suffix
		✔ expression op = ('*' | '/' | '%') expression	# binaryExpr @done(03-21 15)
		✔ expression op = ('+' | '-') expression		# binaryExpr @done(03-21 15)
		// shift
		✔ expression op = ('<<' | '>>') expression # binaryExpr @done(03-21 15)
		// compare
		✔ expression op = ('<' | '>') expression	# binaryExpr @done(03-21 15)
		✔ expression op = ('<=' | '>=') expression	# binaryExpr @done(03-21 15)
		✔ expression op = ('==' | '!=') expression	# binaryExpr @done(03-21 15)
		// bitwise
		✔ expression op = '&' expression	# binaryExpr @done(03-21 15)
		✔ expression op = '^' expression	# binaryExpr @done(03-21 15)
		✔ expression op = '|' expression	# binaryExpr @done(03-21 15)
		// logical
		✔ <assoc = right> expression op = '&&' expression	# binaryExpr @done(03-21 15)
		✔ <assoc = right> expression op = '||' expression	# binaryExpr @done(03-21 15)
		// assign
		✔ <assoc = right> expression op = '=' expression # assignExpr @done(03-21 15)
	☐ FIX 2 bug @started(03-21 16)
		✔ 1, list add null -> have to check for it @done(03-21 17)
		☐ 2, escape sequence
		✔ 3, for each rule have to check set-null @done(03-21 17)
		✔ Opt with ? : operator @done(03-21 17)
		☐ 4, visit DeclNode but can not change into detail instance 
			-> fix by: 1, add acceptfunction in each node 2, specify each node in visit(abstract Node)

