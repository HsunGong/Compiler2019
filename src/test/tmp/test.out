Global static Data
Global static string
>>>>>>>>>>>      Decl of functions      <<<<<<<<<<<<
func gcd
 argVregs:	$x $y 
 blocks
  %gcd_entry:
	OP-MOD $vreg = $x MOD $y
	OP-EQUAL $vreg_2 = $vreg EQUAL 0
	cjump <if> $vreg_2 <then> %if_then <else> %if_else

  %if_else:
	OP-MOD $vreg_3 = $x MOD $y
	move $x_2 <- $y
	move $y_2 <- $vreg_3
	OP-MOD $vreg_4 = $x_2 MOD $y_2
	OP-EQUAL $vreg_5 = $vreg_4 EQUAL 0
	cjump <if> $vreg_5 <then> %if_then_2 <else> %if_else_2

  %if_then_2:
	move $return_value <- $y_2
	jump %gcd_end

  %if_else_2:
	OP-MOD $vreg_6 = $x_2 MOD $y_2
	move $x_3 <- $y_2
	move $y_3 <- $vreg_6
	OP-MOD $vreg_7 = $x_3 MOD $y_3
	OP-EQUAL $vreg_8 = $vreg_7 EQUAL 0
	cjump <if> $vreg_8 <then> %if_then_3 <else> %if_else_3

  %if_else_3:
	OP-MOD $vreg_9 = $x_3 MOD $y_3
	move $x_4 <- $y_3
	move $y_4 <- $vreg_9
	OP-MOD $vreg_10 = $x_4 MOD $y_4
	OP-EQUAL $vreg_11 = $vreg_10 EQUAL 0
	cjump <if> $vreg_11 <then> %if_then_4 <else> %if_else_4

  %if_then_4:
	move $return_value_2 <- $y_4
	jump %gcd_end_2

  %if_else_4:
	OP-MOD $vreg_12 = $x_4 MOD $y_4
	funcall $vreg_13 <- call gcd
	 args:  $y_4 $vreg_12
	move $return_value_2 <- $vreg_13
	jump %gcd_end_2

  %gcd_end_2:
	move $vreg_14 <- $return_value_2
	move $return_value_3 <- $vreg_14
	jump %gcd_end_3

  %if_then_3:
	move $return_value_3 <- $y_3
	jump %gcd_end_3

  %gcd_end_3:
	move $vreg_15 <- $return_value_3
	move $return_value <- $vreg_15
	jump %gcd_end

  %gcd_end:
	move $vreg_16 <- $return_value
	move $return_value_4 <- $vreg_16
	jump %gcd_end_4

  %if_then:
	move $return_value_4 <- $y
	jump %gcd_end_4

  %gcd_end_4:
	return $return_value_4

func main
 argVregs:	
 blocks
  %main_entry:
	jump %_init_func_entry

  %_init_func_entry:
	move $x <- 10
	move $y <- 1
	OP-MOD $vreg = $x MOD $y
	OP-EQUAL $vreg_2 = $vreg EQUAL 0
	cjump <if> $vreg_2 <then> %if_then_5 <else> %if_else_5

  %if_else_5:
	OP-MOD $vreg_3 = $x MOD $y
	funcall $vreg_4 <- call gcd
	 args:  $y $vreg_3
	move $return_value <- $vreg_4
	jump %gcd_end_5

  %if_then_5:
	move $return_value <- $y
	jump %gcd_end_5

  %gcd_end_5:
	move $vreg_5 <- $return_value
	funcall null <- call _printlnInt
	 args:  $vreg_5
	move $x_2 <- 34986
	move $y_2 <- 3087
	OP-MOD $vreg_6 = $x_2 MOD $y_2
	OP-EQUAL $vreg_7 = $vreg_6 EQUAL 0
	cjump <if> $vreg_7 <then> %if_then_6 <else> %if_else_6

  %if_then_6:
	move $return_value_2 <- $y_2
	jump %gcd_end_6

  %if_else_6:
	OP-MOD $vreg_8 = $x_2 MOD $y_2
	funcall $vreg_9 <- call gcd
	 args:  $y_2 $vreg_8
	move $return_value_2 <- $vreg_9
	jump %gcd_end_6

  %gcd_end_6:
	move $vreg_10 <- $return_value_2
	funcall null <- call _printlnInt
	 args:  $vreg_10
	move $x_3 <- 2907
	move $y_3 <- 1539
	OP-MOD $vreg_11 = $x_3 MOD $y_3
	OP-EQUAL $vreg_12 = $vreg_11 EQUAL 0
	cjump <if> $vreg_12 <then> %if_then_7 <else> %if_else_7

  %if_else_7:
	OP-MOD $vreg_13 = $x_3 MOD $y_3
	funcall $vreg_14 <- call gcd
	 args:  $y_3 $vreg_13
	move $return_value_3 <- $vreg_14
	jump %gcd_end_7

  %if_then_7:
	move $return_value_3 <- $y_3
	jump %gcd_end_7

  %gcd_end_7:
	move $vreg_15 <- $return_value_3
	funcall null <- call _printlnInt
	 args:  $vreg_15
	return 0

