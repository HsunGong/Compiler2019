AST-Dump START
<ASTNode> (1:0)
declarations are below:
	<VarDeclNode> (1:4)
	 name: id
	 type:
		<TypeNode> (1:0)
		 type: int
	 init: null
	<ClassDeclNode> (3:0)
	 name: Test
	 varDecls: null
	 funcMember:
		<FuncDeclNode> (4:1)
		 name: id
		 hasReturn: true
		 returnType:
			<TypeNode> (4:1)
			 type: bool
		 parameterList:
			<VarDeclNode> (4:9)
			 name: id_
			 type:
				<TypeNode> (4:9)
				 type: bool
			 init: null
		 body:
			<BlockStmtNode> (4:19)
			 stmtsAnddecls: 
				<ReturnStmtNode> (5:2)
				 value:
					<BinaryOpExprNode> (5:9)
					 op: EQUAL
					 lhs:
						<IdentifierExprNode> (5:9)
						identifier: id_
					 rhs:
						<BoolLiteralNode> (5:16)
						 value: false
		<FuncDeclNode> (8:1)
		 name: Test
		 hasReturn: false
		 returnType:
			<TypeNode> (8:1)
			 type: 
		 parameterList: null
		 body:
			<BlockStmtNode> (8:8)
			 stmtsAnddecls: 
		<FuncDeclNode> (10:1)
		 name: test
		 hasReturn: true
		 returnType:
			<TypeNode> (10:1)
			 type: void
		 parameterList:
			<VarDeclNode> (10:11)
			 name: id
			 type:
				<TypeNode> (10:11)
				 type: string
			 init: null
		 body:
			<BlockStmtNode> (10:22)
			 stmtsAnddecls: 
				<ExprStmtNode> (11:2)
				 expr:
					<AssignExprNode> (11:2)
					 lhs:
						<IdentifierExprNode> (11:2)
						identifier: id
					 rhs:
						<StringLiteralNode> (11:7)
						 value: i am string
				<IfStmtNode> (12:2)
				 cond:
					<FuncallExprNode> (12:6)
					 expr:
						<MemberExprNode> (12:6)
						 member: id
						 expr:
							<ThisExprNode> (12:6)
					 args:
						<BinaryOpExprNode> (12:14)
						 op: LOGIC_OR
						 lhs:
							<BinaryOpExprNode> (12:15)
							 op: INEQUAL
							 lhs:
								<ThisExprNode> (12:15)
							 rhs:
								<NullExprNode> (12:23)
						 rhs:
							<BinaryOpExprNode> (12:33)
							 op: EQUAL
							 lhs:
								<NullExprNode> (12:33)
							 rhs:
								<ThisExprNode> (12:41)
				 then:
					<BlockStmtNode> (12:49)
					 stmtsAnddecls: 
						<VarDeclNode> (13:8)
						 name: id
						 type:
							<TypeNode> (13:3)
							 type: bool
						 init:
							<FuncallExprNode> (13:13)
							 expr:
								<MemberExprNode> (13:13)
								 member: id
								 expr:
									<ThisExprNode> (13:13)
							 args:
								<BoolLiteralNode> (13:21)
								 value: true
						<BlockStmtNode> (14:3)
						 stmtsAnddecls: 
							<VarDeclNode> (15:8)
							 name: id
							 type:
								<TypeNode> (15:4)
								 type: int
							 init: null
							<ForStmtNode> (16:4)
							 varDecl: null
							 init:
								<AssignExprNode> (16:9)
								 lhs:
									<IdentifierExprNode> (16:9)
									identifier: id
								 rhs:
									<IntLiteralNode> (16:14)
									 value: 0
							 cond:
								<FuncallExprNode> (16:17)
								 expr:
									<MemberExprNode> (16:17)
									 member: id
									 expr:
										<ThisExprNode> (16:17)
								 args:
									<BinaryOpExprNode> (16:25)
									 op: GREATER
									 lhs:
										<IdentifierExprNode> (16:25)
										identifier: id
									 rhs:
										<IntLiteralNode> (16:30)
										 value: 0
							 incr:
								<SuffixExprNode> (16:34)
								 op: SUF_INC
								 expr:
									<IdentifierExprNode> (16:34)
									identifier: id
							 body:
								<BlockStmtNode> (16:40)
								 stmtsAnddecls: 
									<IfStmtNode> (17:5)
									 cond:
										<FuncallExprNode> (17:9)
										 expr:
											<MemberExprNode> (17:9)
											 member: id
											 expr:
												<ThisExprNode> (17:9)
										 args:
											<BinaryOpExprNode> (17:17)
											 op: LESS_EQUAL
											 lhs:
												<BinaryOpExprNode> (17:18)
												 op: BIT_OR
												 lhs:
													<IdentifierExprNode> (17:18)
													identifier: id
												 rhs:
													<IdentifierExprNode> (17:23)
													identifier: id
											 rhs:
												<IntLiteralNode> (17:30)
												 value: 0
									 then:
										<BlockStmtNode> (17:34)
										 stmtsAnddecls: 
											<BreakStmtNode> (18:6)
									 else: null
						<ExprStmtNode> (22:3)
						 expr:
							<AssignExprNode> (22:3)
							 lhs:
								<IdentifierExprNode> (22:3)
								identifier: id
							 rhs:
								<BoolLiteralNode> (22:8)
								 value: false
				 else: null
				<IfStmtNode> (24:2)
				 cond:
					<BinaryOpExprNode> (24:6)
					 op: EQUAL
					 lhs:
						<IdentifierExprNode> (24:6)
						identifier: id
					 rhs:
						<StringLiteralNode> (24:12)
						 value: i am string
				 then:
					<BlockStmtNode> (24:27)
					 stmtsAnddecls: 
						<IfStmtNode> (25:3)
						 cond:
							<FuncallExprNode> (25:7)
							 expr:
								<MemberExprNode> (25:7)
								 member: id
								 expr:
									<ThisExprNode> (25:7)
							 args:
								<BinaryOpExprNode> (25:15)
								 op: GREATER
								 lhs:
									<IdentifierExprNode> (25:15)
									identifier: id
								 rhs:
									<StringLiteralNode> (25:20)
									 value: hello
						 then:
							<BlockStmtNode> (25:30)
							 stmtsAnddecls: 
								<ReturnStmtNode> (26:4)
								 value: null
						 else: null
						<VarDeclNode> (28:8)
						 name: id
						 type:
							<TypeNode> (28:3)
							 type: class Test
						 init:
							<NewExprNode> (28:17)
							 numDim: 0
							 newType:
								<TypeNode> (28:17)
								 type: class Test
							dims: null
						<IfStmtNode> (29:3)
						 cond:
							<FuncallExprNode> (29:7)
							 expr:
								<MemberExprNode> (29:7)
								 member: id
								 expr:
									<IdentifierExprNode> (29:7)
									identifier: id
							 args:
								<FuncallExprNode> (29:13)
								 expr:
									<MemberExprNode> (29:13)
									 member: id
									 expr:
										<IdentifierExprNode> (29:13)
										identifier: id
								 args:
									<FuncallExprNode> (29:19)
									 expr:
										<MemberExprNode> (29:19)
										 member: id
										 expr:
											<IdentifierExprNode> (29:19)
											identifier: id
									 args:
										<BoolLiteralNode> (29:25)
										 value: false
						 then:
							<BlockStmtNode> (29:35)
							 stmtsAnddecls: 
								<VarDeclNode> (30:8)
								 name: id
								 type:
									<TypeNode> (30:4)
									 type: int
								 init:
									<IntLiteralNode> (30:13)
									 value: 233
								<BlockStmtNode> (31:4)
								 stmtsAnddecls: 
									<VarDeclNode> (32:10)
									 name: test
									 type:
										<TypeNode> (32:5)
										 type: class Test
									 init:
										<NewExprNode> (32:21)
										 numDim: 0
										 newType:
											<TypeNode> (32:21)
											 type: class Test
										dims: null
									<IfStmtNode> (33:5)
									 cond:
										<FuncallExprNode> (33:9)
										 expr:
											<MemberExprNode> (33:9)
											 member: id
											 expr:
												<IdentifierExprNode> (33:9)
												identifier: test
										 args:
											<BinaryOpExprNode> (33:17)
											 op: GREATER
											 lhs:
												<IdentifierExprNode> (33:17)
												identifier: id
											 rhs:
												<IntLiteralNode> (33:22)
												 value: 0
									 then:
										<BlockStmtNode> (33:26)
										 stmtsAnddecls: 
											<ExprStmtNode> (34:6)
											 expr:
												<SuffixExprNode> (34:6)
												 op: SUF_DEC
												 expr:
													<IdentifierExprNode> (34:6)
													identifier: id
									 else: null
									<ExprStmtNode> (36:5)
									 expr:
										<SuffixExprNode> (36:5)
										 op: PRE_DEC
										 expr:
											<IdentifierExprNode> (36:7)
											identifier: id
								<ReturnStmtNode> (38:4)
								 value: null
						 else: null
						<ExprStmtNode> (40:3)
						 expr:
							<AssignExprNode> (40:3)
							 lhs:
								<IdentifierExprNode> (40:3)
								identifier: id
							 rhs:
								<NewExprNode> (40:12)
								 numDim: 0
								 newType:
									<TypeNode> (40:12)
									 type: class Test
								dims: null
				 else: null
				<ExprStmtNode> (42:2)
				 expr:
					<AssignExprNode> (42:2)
					 lhs:
						<IdentifierExprNode> (42:2)
						identifier: id
					 rhs:
						<StringLiteralNode> (42:7)
						 value: string
	<FuncDeclNode> (46:0)
	 name: func
	 hasReturn: true
	 returnType:
		<TypeNode> (46:0)
		 type: array
	 parameterList:
		<VarDeclNode> (46:12)
		 name: t
		 type:
			<TypeNode> (46:12)
			 type: array
		 init: null
	 body:
		<BlockStmtNode> (46:24)
		 stmtsAnddecls: 
			<ReturnStmtNode> (47:1)
			 value:
				<ArrayrefExprNode> (47:8):
				 arr:
					<IdentifierExprNode> (47:8)
					identifier: t
				 index:
					<IntLiteralNode> (47:10)
					 value: 0
	<FuncDeclNode> (50:0)
	 name: main
	 hasReturn: true
	 returnType:
		<TypeNode> (50:0)
		 type: int
	 parameterList: null
	 body:
		<BlockStmtNode> (50:11)
		 stmtsAnddecls: 
			<VarDeclNode> (51:6)
			 name: test
			 type:
				<TypeNode> (51:1)
				 type: class Test
			 init:
				<NewExprNode> (51:17)
				 numDim: 0
				 newType:
					<TypeNode> (51:17)
					 type: class Test
				dims: null
			<ExprStmtNode> (52:1)
			 expr:
				<FuncallExprNode> (52:1)
				 expr:
					<MemberExprNode> (52:1)
					 member: test
					 expr:
						<IdentifierExprNode> (52:1)
						identifier: test
				 args:
					<StringLiteralNode> (52:11)
					 value: hello world
			<IfStmtNode> (53:1)
			 cond:
				<FuncallExprNode> (53:5)
				 expr:
					<MemberExprNode> (53:5)
					 member: id
					 expr:
						<IdentifierExprNode> (53:5)
						identifier: test
				 args:
					<BinaryOpExprNode> (53:13)
					 op: GREATER
					 lhs:
						<IdentifierExprNode> (53:13)
						identifier: id
					 rhs:
						<IntLiteralNode> (53:18)
						 value: 0
			 then:
				<BlockStmtNode> (53:22)
				 stmtsAnddecls: 
					<VarDeclNode> (54:11)
					 name: test
					 type:
						<TypeNode> (54:2)
						 type: array
					 init:
						<NewExprNode> (54:22)
						 numDim: 2
						 newType:
							<TypeNode> (54:22)
							 type: array
						dims:
							<IntLiteralNode> (54:27)
							 value: 10
							<IntLiteralNode> (54:31)
							 value: 10
					<IfStmtNode> (55:2)
					 cond:
						<BinaryOpExprNode> (55:6)
						 op: LOGIC_AND
						 lhs:
							<BinaryOpExprNode> (55:6)
							 op: INEQUAL
							 lhs:
								<FuncallExprNode> (55:6)
								 expr:
									<IdentifierExprNode> (55:6)
									identifier: func
								 args:
									<IdentifierExprNode> (55:11)
									identifier: test
							 rhs:
								<NullExprNode> (55:20)
						 rhs:
							<BinaryOpExprNode> (55:28)
							 op: INEQUAL
							 lhs:
								<ArrayrefExprNode> (55:28):
								 arr:
									<FuncallExprNode> (55:28)
									 expr:
										<IdentifierExprNode> (55:28)
										identifier: func
									 args:
										<IdentifierExprNode> (55:33)
										identifier: test
								 index:
									<IntLiteralNode> (55:39)
									 value: 1
							 rhs:
								<NullExprNode> (55:45)
					 then:
						<BlockStmtNode> (55:51)
						 stmtsAnddecls: 
							<ExprStmtNode> (56:3)
							 expr:
								<AssignExprNode> (56:3)
								 lhs:
									<ArrayrefExprNode> (56:3):
									 arr:
										<ArrayrefExprNode> (56:3):
										 arr:
											<IdentifierExprNode> (56:3)
											identifier: test
										 index:
											<IntLiteralNode> (56:8)
											 value: 1
									 index:
										<IntLiteralNode> (56:11)
										 value: 1
								 rhs:
									<ArrayrefExprNode> (56:16):
									 arr:
										<FuncallExprNode> (56:16)
										 expr:
											<IdentifierExprNode> (56:16)
											identifier: func
										 args:
											<IdentifierExprNode> (56:21)
											identifier: test
									 index:
										<IntLiteralNode> (56:27)
										 value: 0
					 else: null
					<ReturnStmtNode> (58:2)
					 value:
						<SuffixExprNode> (58:9)
						 op: PRE_DEC
						 expr:
							<IdentifierExprNode> (58:11)
							identifier: id
			 else: null
			<ReturnStmtNode> (60:1)
			 value:
				<IntLiteralNode> (60:8)
				 value: 0
	<VarDeclNode> (63:2)
	 name: a
	 type:
		<TypeNode> (63:0)
		 type: class A
	 init:
		<NewExprNode> (63:10)
		 numDim: 0
		 newType:
			<TypeNode> (63:10)
			 type: class A
		dims: null
	<VarDeclNode> (64:2)
	 name: b
	 type:
		<TypeNode> (64:0)
		 type: class B
	 init:
		<FuncallExprNode> (64:6)
		 expr:
			<MemberExprNode> (64:6)
			 member: method
			 expr:
				<IdentifierExprNode> (64:6)
				identifier: a
		 args: null
	<VarDeclNode> (65:2)
	 name: aa
	 type:
		<TypeNode> (65:0)
		 type: class A
	 init:
		<FuncallExprNode> (65:7)
		 expr:
			<MemberExprNode> (65:7)
			 member: method
			 expr:
				<FuncallExprNode> (65:7)
				 expr:
					<MemberExprNode> (65:7)
					 member: method
					 expr:
						<FuncallExprNode> (65:7)
						 expr:
							<MemberExprNode> (65:7)
							 member: method
							 expr:
								<IdentifierExprNode> (65:7)
								identifier: b
						 args: null
				 args: null
		 args: null
	<ClassDeclNode> (67:0)
	 name: A
	 varDecls:
		<VarDeclNode> (68:3)
		 name: b
		 type:
			<TypeNode> (68:1)
			 type: class B
		 init: null
	 funcMember:
		<FuncDeclNode> (69:1)
		 name: method
		 hasReturn: true
		 returnType:
			<TypeNode> (69:1)
			 type: class B
		 parameterList: null
		 body:
			<BlockStmtNode> (69:12)
			 stmtsAnddecls: 
	<ClassDeclNode> (72:0)
	 name: B
	 varDecls:
		<VarDeclNode> (73:3)
		 name: a
		 type:
			<TypeNode> (73:1)
			 type: class A
		 init: null
	 funcMember:
		<FuncDeclNode> (74:1)
		 name: method
		 hasReturn: true
		 returnType:
			<TypeNode> (74:1)
			 type: class A
		 parameterList: null
		 body:
			<BlockStmtNode> (74:12)
			 stmtsAnddecls: 
AST-Dump END



Scope-Dump START
Scope: isTop: true
<Func Entity>:  name: print, Type: function print
 returnType: void, isBuiltIn: true
 isMember: false, ClassName: 
 params:
	<Var Entity>:  name: str, Type: string
	 isMember: false, ClassName: null
	 isGlobal: false
<Func Entity>:  name: println, Type: function println
 returnType: void, isBuiltIn: true
 isMember: false, ClassName: 
 params:
	<Var Entity>:  name: str, Type: string
	 isMember: false, ClassName: null
	 isGlobal: false
<Func Entity>:  name: getString, Type: function getString
 returnType: string, isBuiltIn: true
 isMember: false, ClassName: 
 params:
	null
<Func Entity>:  name: getInt, Type: function getInt
 returnType: int, isBuiltIn: true
 isMember: false, ClassName: 
 params:
	null
<Func Entity>:  name: toString, Type: function toString
 returnType: string, isBuiltIn: true
 isMember: false, ClassName: 
 params:
	<Var Entity>:  name: i, Type: int
	 isMember: false, ClassName: null
	 isGlobal: false
<Class Entity>:  name: _array, Type: class _array
	Scope: isTop: false
	<Func Entity>:  name: size, Type: function size
	 returnType: int, isBuiltIn: true
	 isMember: true, ClassName: _array
	 params:
		<Var Entity>:  name: __this, Type: array
		 isMember: false, ClassName: null
		 isGlobal: false
<Class Entity>:  name: _string, Type: class _string
	Scope: isTop: false
	<Func Entity>:  name: length, Type: function length
	 returnType: int, isBuiltIn: true
	 isMember: true, ClassName: _string
	 params:
		<Var Entity>:  name: __this, Type: string
		 isMember: false, ClassName: null
		 isGlobal: false
	<Func Entity>:  name: substring, Type: function substring
	 returnType: string, isBuiltIn: true
	 isMember: true, ClassName: _string
	 params:
		<Var Entity>:  name: __this, Type: string
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: left, Type: int
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: right, Type: int
		 isMember: false, ClassName: null
		 isGlobal: false
	<Func Entity>:  name: parseInt, Type: function parseInt
	 returnType: int, isBuiltIn: true
	 isMember: true, ClassName: _string
	 params:
		<Var Entity>:  name: __this, Type: string
		 isMember: false, ClassName: null
		 isGlobal: false
	<Func Entity>:  name: ord, Type: function ord
	 returnType: int, isBuiltIn: true
	 isMember: true, ClassName: _string
	 params:
		<Var Entity>:  name: __this, Type: string
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: pos, Type: int
		 isMember: false, ClassName: null
		 isGlobal: false
<Class Entity>:  name: Test, Type: class Test
	Scope: isTop: false
	<Func Entity>:  name: id, Type: function id
	 returnType: bool, isBuiltIn: false
	 isMember: true, ClassName: id
	 params:
		<Var Entity>:  name: __this, Type: class id
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: id_, Type: bool
		 isMember: false, ClassName: null
		 isGlobal: false
	<Func Entity>:  name: Test, Type: function Test
	 returnType: , isBuiltIn: false
	 isMember: true, ClassName: Test
	 params:
		<Var Entity>:  name: __this, Type: class Test
		 isMember: false, ClassName: null
		 isGlobal: false
	<Func Entity>:  name: test, Type: function test
	 returnType: void, isBuiltIn: false
	 isMember: true, ClassName: test
	 params:
		<Var Entity>:  name: __this, Type: class test
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: id, Type: string
		 isMember: false, ClassName: null
		 isGlobal: false
		>>>> child		Scope: isTop: false
		<Var Entity>:  name: __this, Type: class Test
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: id_, Type: bool
		 isMember: true, ClassName: Test
		 isGlobal: false
		>>>> child		Scope: isTop: false
		<Var Entity>:  name: __this, Type: class Test
		 isMember: false, ClassName: null
		 isGlobal: false
		>>>> child		Scope: isTop: false
		<Var Entity>:  name: __this, Type: class Test
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: id, Type: string
		 isMember: true, ClassName: Test
		 isGlobal: false
			>>>> child			Scope: isTop: false
			<Var Entity>:  name: id, Type: bool
			 isMember: true, ClassName: Test
			 isGlobal: false
				>>>> child				Scope: isTop: false
				<Var Entity>:  name: id, Type: int
				 isMember: true, ClassName: Test
				 isGlobal: false
					>>>> child					Scope: isTop: false
						>>>> child						Scope: isTop: false
			>>>> child			Scope: isTop: false
			<Var Entity>:  name: id, Type: class Test
			 isMember: true, ClassName: Test
			 isGlobal: false
				>>>> child				Scope: isTop: false
				>>>> child				Scope: isTop: false
				<Var Entity>:  name: id, Type: int
				 isMember: true, ClassName: Test
				 isGlobal: false
					>>>> child					Scope: isTop: false
					<Var Entity>:  name: test, Type: class Test
					 isMember: true, ClassName: Test
					 isGlobal: false
						>>>> child						Scope: isTop: false
<Func Entity>:  name: func, Type: function func
 returnType: array, isBuiltIn: false
 isMember: false, ClassName: 
 params:
	<Var Entity>:  name: t, Type: array
	 isMember: false, ClassName: null
	 isGlobal: false
<Func Entity>:  name: main, Type: function main
 returnType: int, isBuiltIn: false
 isMember: false, ClassName: 
 params:
	null
<Class Entity>:  name: A, Type: class A
	Scope: isTop: false
	<Var Entity>:  name: b, Type: class B
	 isMember: true, ClassName: A
	 isGlobal: false
	<Func Entity>:  name: method, Type: function method
	 returnType: class B, isBuiltIn: false
	 isMember: true, ClassName: method
	 params:
		<Var Entity>:  name: __this, Type: class method
		 isMember: false, ClassName: null
		 isGlobal: false
		>>>> child		Scope: isTop: false
		<Var Entity>:  name: __this, Type: class A
		 isMember: false, ClassName: null
		 isGlobal: false
<Class Entity>:  name: B, Type: class B
	Scope: isTop: false
	<Var Entity>:  name: a, Type: class A
	 isMember: true, ClassName: B
	 isGlobal: false
	<Func Entity>:  name: method, Type: function method
	 returnType: class A, isBuiltIn: false
	 isMember: true, ClassName: method
	 params:
		<Var Entity>:  name: __this, Type: class method
		 isMember: false, ClassName: null
		 isGlobal: false
		>>>> child		Scope: isTop: false
		<Var Entity>:  name: __this, Type: class B
		 isMember: false, ClassName: null
		 isGlobal: false
<Var Entity>:  name: id, Type: int
 isMember: false, ClassName: null
 isGlobal: true
<Var Entity>:  name: a, Type: class A
 isMember: false, ClassName: null
 isGlobal: true
<Var Entity>:  name: b, Type: class B
 isMember: false, ClassName: null
 isGlobal: true
<Var Entity>:  name: aa, Type: class A
 isMember: false, ClassName: null
 isGlobal: true
	>>>> child	Scope: isTop: false
	<Func Entity>:  name: size, Type: function size
	 returnType: int, isBuiltIn: true
	 isMember: true, ClassName: _array
	 params:
		<Var Entity>:  name: __this, Type: array
		 isMember: false, ClassName: null
		 isGlobal: false
	>>>> child	Scope: isTop: false
	<Func Entity>:  name: length, Type: function length
	 returnType: int, isBuiltIn: true
	 isMember: true, ClassName: _string
	 params:
		<Var Entity>:  name: __this, Type: string
		 isMember: false, ClassName: null
		 isGlobal: false
	<Func Entity>:  name: substring, Type: function substring
	 returnType: string, isBuiltIn: true
	 isMember: true, ClassName: _string
	 params:
		<Var Entity>:  name: __this, Type: string
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: left, Type: int
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: right, Type: int
		 isMember: false, ClassName: null
		 isGlobal: false
	<Func Entity>:  name: parseInt, Type: function parseInt
	 returnType: int, isBuiltIn: true
	 isMember: true, ClassName: _string
	 params:
		<Var Entity>:  name: __this, Type: string
		 isMember: false, ClassName: null
		 isGlobal: false
	<Func Entity>:  name: ord, Type: function ord
	 returnType: int, isBuiltIn: true
	 isMember: true, ClassName: _string
	 params:
		<Var Entity>:  name: __this, Type: string
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: pos, Type: int
		 isMember: false, ClassName: null
		 isGlobal: false
	>>>> child	Scope: isTop: false
	<Func Entity>:  name: id, Type: function id
	 returnType: bool, isBuiltIn: false
	 isMember: true, ClassName: id
	 params:
		<Var Entity>:  name: __this, Type: class id
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: id_, Type: bool
		 isMember: false, ClassName: null
		 isGlobal: false
	<Func Entity>:  name: Test, Type: function Test
	 returnType: , isBuiltIn: false
	 isMember: true, ClassName: Test
	 params:
		<Var Entity>:  name: __this, Type: class Test
		 isMember: false, ClassName: null
		 isGlobal: false
	<Func Entity>:  name: test, Type: function test
	 returnType: void, isBuiltIn: false
	 isMember: true, ClassName: test
	 params:
		<Var Entity>:  name: __this, Type: class test
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: id, Type: string
		 isMember: false, ClassName: null
		 isGlobal: false
		>>>> child		Scope: isTop: false
		<Var Entity>:  name: __this, Type: class Test
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: id_, Type: bool
		 isMember: true, ClassName: Test
		 isGlobal: false
		>>>> child		Scope: isTop: false
		<Var Entity>:  name: __this, Type: class Test
		 isMember: false, ClassName: null
		 isGlobal: false
		>>>> child		Scope: isTop: false
		<Var Entity>:  name: __this, Type: class Test
		 isMember: false, ClassName: null
		 isGlobal: false
		<Var Entity>:  name: id, Type: string
		 isMember: true, ClassName: Test
		 isGlobal: false
			>>>> child			Scope: isTop: false
			<Var Entity>:  name: id, Type: bool
			 isMember: true, ClassName: Test
			 isGlobal: false
				>>>> child				Scope: isTop: false
				<Var Entity>:  name: id, Type: int
				 isMember: true, ClassName: Test
				 isGlobal: false
					>>>> child					Scope: isTop: false
						>>>> child						Scope: isTop: false
			>>>> child			Scope: isTop: false
			<Var Entity>:  name: id, Type: class Test
			 isMember: true, ClassName: Test
			 isGlobal: false
				>>>> child				Scope: isTop: false
				>>>> child				Scope: isTop: false
				<Var Entity>:  name: id, Type: int
				 isMember: true, ClassName: Test
				 isGlobal: false
					>>>> child					Scope: isTop: false
					<Var Entity>:  name: test, Type: class Test
					 isMember: true, ClassName: Test
					 isGlobal: false
						>>>> child						Scope: isTop: false
	>>>> child	Scope: isTop: false
	<Var Entity>:  name: b, Type: class B
	 isMember: true, ClassName: A
	 isGlobal: false
	<Func Entity>:  name: method, Type: function method
	 returnType: class B, isBuiltIn: false
	 isMember: true, ClassName: method
	 params:
		<Var Entity>:  name: __this, Type: class method
		 isMember: false, ClassName: null
		 isGlobal: false
		>>>> child		Scope: isTop: false
		<Var Entity>:  name: __this, Type: class A
		 isMember: false, ClassName: null
		 isGlobal: false
	>>>> child	Scope: isTop: false
	<Var Entity>:  name: a, Type: class A
	 isMember: true, ClassName: B
	 isGlobal: false
	<Func Entity>:  name: method, Type: function method
	 returnType: class A, isBuiltIn: false
	 isMember: true, ClassName: method
	 params:
		<Var Entity>:  name: __this, Type: class method
		 isMember: false, ClassName: null
		 isGlobal: false
		>>>> child		Scope: isTop: false
		<Var Entity>:  name: __this, Type: class B
		 isMember: false, ClassName: null
		 isGlobal: false
	>>>> child	Scope: isTop: false
	<Var Entity>:  name: t, Type: array
	 isMember: false, ClassName: null
	 isGlobal: false
	>>>> child	Scope: isTop: false
	<Var Entity>:  name: test, Type: class Test
	 isMember: false, ClassName: null
	 isGlobal: false
		>>>> child		Scope: isTop: false
		<Var Entity>:  name: test, Type: array
		 isMember: false, ClassName: null
		 isGlobal: false
			>>>> child			Scope: isTop: false
Scope-Dump END



